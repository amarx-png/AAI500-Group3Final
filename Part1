{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "source": [
        "# Load necessary libraries\n",
        "import pandas as pd # for data science\n",
        "import numpy as np  # linear algebra library\n",
        "import matplotlib.pyplot as plt # plotting library\n",
        "import seaborn as sns # additional plotting library\n",
        "from scipy import stats\n",
        "import statsmodels.api as sm\n",
        "import statsmodels.formula.api as smf\n",
        "import os\n",
        "import matplotlib.pyplot as plt\n",
        "import kagglehub\n",
        "\n",
        "path = kagglehub.dataset_download(\"calmdownkarm/ufcdataset/versions/5\")\n",
        "\n",
        "file_to_load = \"data.csv\"\n",
        "full_path = os.path.join(path, file_to_load)\n",
        "ufc = pd.read_csv(full_path)\n",
        "\n",
        "# Trim dataset down to only columns used in this portion of the analysis\n",
        "columns_to_keep = list(set(['B_Weight', 'B_Height', 'B_Age', 'R_Weight', 'R_Height', 'R_Age', 'winner', 'winby']))\n",
        "ufc = ufc[columns_to_keep]\n",
        "\n",
        "# Scatterplots for the height, weight, and age comparison\n",
        "plot_pairs = [\n",
        "    ('R_Weight', 'B_Weight', 'Fighter Weight'),\n",
        "    ('R_Height', 'B_Height', 'Fighter Height'),\n",
        "    ('R_Age', 'B_Age', 'Fighter Age')\n",
        "]\n",
        "\n",
        "fig, axes = plt.subplots(1, 3, figsize=(18, 6))\n",
        "plt.suptitle('Red Corner vs. Blue Corner')\n",
        "\n",
        "for i, (red, blue, title) in enumerate(plot_pairs):\n",
        "    ax = axes[i]\n",
        "\n",
        "    sns.scatterplot(\n",
        "        data=ufc,\n",
        "        x=red,\n",
        "        y=blue,\n",
        "        ax=ax\n",
        "    )\n",
        "\n",
        "    ax.set_title(title)\n",
        "    ax.set_xlabel('Red Corner')\n",
        "    ax.set_ylabel('Blue Corner')\n",
        "\n",
        "plt.show()\n",
        "\n",
        "# Calculate differentials (blue \"b\" advantage) and win stat column as bool\n",
        "ufc['weight_diff'] = ufc['B_Weight'] - ufc['R_Weight']\n",
        "ufc['height_diff'] = ufc['B_Height'] - ufc['R_Height']\n",
        "ufc['age_diff'] = ufc['B_Age'] - ufc['R_Age']\n",
        "\n",
        "if ufc['winner'].astype(str).str.contains('Blue').any():\n",
        "    ufc['blue_win'] = np.where(ufc['winner'].astype(str).str.contains('Blue', case=False), 1, 0)\n",
        "else:\n",
        "    ufc['blue_win'] = np.where(ufc['winner'] == ufc['winner'].iloc[0], 1, 0)\n",
        "\n",
        "# Correlation for the height, weight, and age differentials\n",
        "diff_correlations = ufc[['weight_diff', 'height_diff', 'age_diff']].corrwith(ufc['blue_win'])\n",
        "print(diff_correlations.to_frame(name='correlation'))\n",
        "\n",
        "# GLM model for the height, weight, and age differentials\n",
        "model = smf.glm(formula='blue_win ~ weight_diff + height_diff + age_diff', family=sm.families.Binomial(), data=ufc).fit()\n",
        "print(model.summary())"
      ],
      "metadata": {
        "id": "3Kf4smyoD6Pv"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}
